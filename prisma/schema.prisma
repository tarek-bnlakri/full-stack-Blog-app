
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Posts Post[]
  Coments Comment[]
  LikesPos LikePost[]
  LikesCom LikeComment[]
}

model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Category{
  id String @id @default(cuid()) @map("_id")
  slug String @unique
  title String
  img String?
  Posts Post[]
}
model Post{
  id String @id @default(cuid()) @map("_id")
  slug String @unique
  createdAt DateTime @default(now())
  title String
  description String
  img String?
  views Int @default(0)

  catSlug String 
  cat Category @relation(fields: [catSlug], references: [slug],onDelete: Cascade)

  userEmail String
  user User @relation(fields: [userEmail], references: [email],onDelete: Cascade)

  Comments Comment[] 
  Likes LikePost[]

}
model Comment{
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  description String
  userEmail String
  
  user User @relation(fields: [userEmail], references: [email],onDelete: Cascade)
  
  slugpost String
  post Post @relation(fields: [slugpost], references: [slug],onDelete: Cascade)
  
  LikesCom LikeComment[]

}
model LikePost{
   id String @id @default(cuid()) @map("_id")

   userEmail String
   user User @relation(fields: [userEmail], references: [email],onDelete: Cascade)

   slugpost String
  post Post @relation(fields: [slugpost], references: [slug],onDelete: Cascade)

}

model LikeComment{
  id String @id @default(cuid()) @map("_id")

  userEmail String
   user User @relation(fields: [userEmail], references: [email],onDelete: Cascade)

   idCom String
  comment Comment @relation(fields: [idCom], references: [id],onDelete: Cascade)
}